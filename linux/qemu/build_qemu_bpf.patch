diff --git a/README.md b/README.md
new file mode 100644
index 0000000000..5c8dc11ece
--- /dev/null
+++ b/README.md
@@ -0,0 +1,16 @@
+# build
+
+```
+make qemu_aarch64_virt_defconfig
+make -j4
+```
+
+run
+```
+output/host/bin/qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append "rootwait root=/dev/vda console=ttyAMA0" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 -s -S
+```
+
+run with nfs:
+```
+output/host/bin/qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append "rootwait root=/dev/nfs rw nfsroot=10.0.2.2:/home/lixiang/github/sst-buildroot/output/target,vers=4,tcp ip=dhcp console=ttyAMA0" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 -s -S
+```
\ No newline at end of file
diff --git a/board/qemu/aarch64-virt/linux.config b/board/qemu/aarch64-virt/linux.config
index 971b9fcf86..aad08f59be 100644
--- a/board/qemu/aarch64-virt/linux.config
+++ b/board/qemu/aarch64-virt/linux.config
@@ -74,3 +74,55 @@ CONFIG_VIRTIO_FS=y
 CONFIG_OVERLAY_FS=y
 CONFIG_TMPFS=y
 CONFIG_TMPFS_POSIX_ACL=y
+
+CONFIG_DEBUG_KERNEL=y
+CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
+CONFIG_RANDOMIZE_BASE=no
+CONFIG_KALLSYMS_ALL=y
+CONFIG_KALLSYMS=y
+
+CONFIG_GDB_SCRIPTS=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_KERNFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V2=y
+CONFIG_NFS_V3=y
+CONFIG_NFS_V4=y
+CONFIG_ROOT_NFS=y
+CONFIG_NFS_USE_KERNEL_DNS=y
+
+CONFIG_FTRACE=y
+CONFIG_FTRACE_SYSCALLS=y
+CONFIG_KPROBES=y
+CONFIG_KPROBE_EVENTS=y
+CONFIG_FUNCTION_TRACER=y
+CONFIG_FUNCTION_GRAPH_TRACER=y
+CONFIG_DYNAMIC_FTRACE=y
+CONFIG_FUNCTION_PROFILER=y
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_FS_ALLOW_ALL=y
+PAHOLE_HAS_SPLIT_BTF=y
+
+CONFIG_IKHEADERS=y
+
+CONFIG_BPF=y
+CONFIG_BPF_EVENTS=y
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_JIT=y
+CONFIG_BPF_JIT_ALWAYS_ON=y
+CONFIG_DEBUG_INFO_BTF=y
+CONFIG_NET_CLS_BPF=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_ACT_BPF=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_CGROUP_BPF=y
+CONFIG_LWTUNNEL_BPF=y
+CONFIG_XDP_SOCKETS=y
+CONFIG_XDP_SOCKETS_DIAG=y
+
+CONFIG_NET_SCH_SFQ=m
+CONFIG_NET_ACT_POLICE=m
+CONFIG_NET_ACT_GACT=m
+CONFIG_DUMMY=m
+CONFIG_VXLAN=m
\ No newline at end of file
diff --git a/board/qemu/aarch64-virt/post-build.sh b/board/qemu/aarch64-virt/post-build.sh
new file mode 100755
index 0000000000..b8d21261b3
--- /dev/null
+++ b/board/qemu/aarch64-virt/post-build.sh
@@ -0,0 +1,17 @@
+#!/bin/sh
+
+set -u
+set -e
+
+# Add a console on tty1
+# if [ -e ${TARGET_DIR}/etc/inittab ]; then
+#     grep -qE '^tty1::' ${TARGET_DIR}/etc/inittab || \
+# 	sed -i '/GENERIC_SERIAL/a\
+# tty1::respawn:/sbin/getty -L  tty1 0 vt100 # QEMU graphical window' ${TARGET_DIR}/etc/inittab
+# fi
+
+cp output/build/bpftrace-v0.22.1/src/librequired_resources.so output/target/usr/lib/
+cp launch.json output/build/linux-6.1.44/
+cd output/build/linux-6.1.44/
+./scripts/clang-tools/gen_compile_commands.py
+cd -
\ No newline at end of file
diff --git a/board/qemu/aarch64-virt/readme.txt b/board/qemu/aarch64-virt/readme.txt
index db35a3a7a8..6f477af474 100644
--- a/board/qemu/aarch64-virt/readme.txt
+++ b/board/qemu/aarch64-virt/readme.txt
@@ -1,5 +1,5 @@
 Run the emulation with:
 
-  qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append "rootwait root=/dev/vda console=ttyAMA0" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 # qemu_aarch64_virt_defconfig
+  qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append "rootwait root=/dev/vda console=ttyAMA0" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext2,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 # qemu_aarch64_virt_defconfig
 
 The login prompt will appear in the terminal that started Qemu.
diff --git a/board/qemu/post-image.sh b/board/qemu/post-image.sh
index fe46d0d4af..42e0e1796f 100755
--- a/board/qemu/post-image.sh
+++ b/board/qemu/post-image.sh
@@ -49,3 +49,11 @@ sed -e "s|@SERIAL_ARGS@|${SERIAL_ARGS}|g" \
     <"${QEMU_BOARD_DIR}/start-qemu.sh.in" \
     >"${START_QEMU_SCRIPT}"
 chmod +x "${START_QEMU_SCRIPT}"
+
+pushd output/build/linux-6.1.44/
+./scripts/clang-tools/gen_compile_commands.py
+popd
+
+rm -r output/build/linux-6.1.44/.vscode/
+mkdir output/build/linux-6.1.44/.vscode/
+cp launch.json output/build/linux-6.1.44/.vscode/
\ No newline at end of file
diff --git a/board/qemu/start-qemu.sh.in b/board/qemu/start-qemu.sh.in
index 38024b449e..c7a9ac282b 100644
--- a/board/qemu/start-qemu.sh.in
+++ b/board/qemu/start-qemu.sh.in
@@ -25,4 +25,4 @@ if ! ${mode_sys_qemu}; then
     export PATH="@HOST_DIR@/bin:${PATH}"
 fi
 
-exec @QEMU_CMD_LINE@ ${EXTRA_ARGS} "$@"
+exec @QEMU_CMD_LINE@ ${EXTRA_ARGS} "$@"
\ No newline at end of file
diff --git a/board/qemu/x86_64/linux.config b/board/qemu/x86_64/linux.config
index e1d2ce01b0..f193e8b6cd 100644
--- a/board/qemu/x86_64/linux.config
+++ b/board/qemu/x86_64/linux.config
@@ -51,3 +51,42 @@ CONFIG_AUTOFS4_FS=y
 CONFIG_TMPFS=y
 CONFIG_TMPFS_POSIX_ACL=y
 CONFIG_UNWINDER_FRAME_POINTER=y
+
+CONFIG_DEBUG_KERNEL=y
+CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT=y
+CONFIG_RANDOMIZE_BASE=no
+CONFIG_KALLSYMS_ALL=y
+CONFIG_KALLSYMS=y
+
+CONFIG_GDB_SCRIPTS=y
+CONFIG_IP_PNP=y
+CONFIG_IP_PNP_DHCP=y
+CONFIG_KERNFS=y
+CONFIG_NFS_FS=y
+CONFIG_NFS_V2=y
+CONFIG_NFS_V3=y
+CONFIG_NFS_V4=y
+CONFIG_ROOT_NFS=y
+CONFIG_NFS_USE_KERNEL_DNS=y
+
+CONFIG_FTRACE=y
+CONFIG_FTRACE_SYSCALLS=y
+CONFIG_KPROBES=y
+CONFIG_KPROBE_EVENTS=y
+CONFIG_BPF_EVENTS=y
+CONFIG_DEBUG_FS=y
+CONFIG_DEBUG_FS_ALLOW_ALL=y
+
+
+CONFIG_BPF_SYSCALL=y
+CONFIG_BPF_JIT_ALWAYS_ON=y
+CONFIG_DEBUG_INFO_BTF=y
+CONFIG_NET_CLS_BPF=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_NET_SCH_INGRESS=y
+CONFIG_NET_CLS_ACT=y
+CONFIG_CGROUP_BPF=y
+CONFIG_LWTUNNEL_BPF=y
+CONFIG_XDP_SOCKETS=y
+CONFIG_XDP_SOCKETS_DIAG=y
+CONFIG_DEBUG_INFO_BTF=y
diff --git a/board/qemu/x86_64/post-build.sh b/board/qemu/x86_64/post-build.sh
index bf83a002c2..c14fb43d39 100755
--- a/board/qemu/x86_64/post-build.sh
+++ b/board/qemu/x86_64/post-build.sh
@@ -9,3 +9,8 @@ if [ -e ${TARGET_DIR}/etc/inittab ]; then
 	sed -i '/GENERIC_SERIAL/a\
 tty1::respawn:/sbin/getty -L  tty1 0 vt100 # QEMU graphical window' ${TARGET_DIR}/etc/inittab
 fi
+
+cp launch.json output/build/linux-6.1.44/
+cd output/build/linux-6.1.44/
+./scripts/clang-tools/gen_compile_commands.py
+cd -
\ No newline at end of file
diff --git a/configs/qemu_aarch64_virt_defconfig b/configs/qemu_aarch64_virt_defconfig
index 1167060308..387cf024d9 100644
--- a/configs/qemu_aarch64_virt_defconfig
+++ b/configs/qemu_aarch64_virt_defconfig
@@ -11,6 +11,7 @@ BR2_TARGET_ROOTFS_EXT2_4=y
 # BR2_TARGET_ROOTFS_TAR is not set
 
 # Image
+BR2_ROOTFS_POST_BUILD_SCRIPT="board/qemu/aarch64-virt/post-build.sh"
 BR2_ROOTFS_POST_IMAGE_SCRIPT="board/qemu/post-image.sh"
 BR2_ROOTFS_POST_SCRIPT_ARGS="$(BR2_DEFCONFIG)"
 
@@ -28,3 +29,38 @@ BR2_LINUX_KERNEL_NEEDS_HOST_OPENSSL=y
 # host-qemu for gitlab testing
 BR2_PACKAGE_HOST_QEMU=y
 BR2_PACKAGE_HOST_QEMU_SYSTEM_MODE=y
+
+# add for sst-buildroot
+BR2_PACKAGE_HOST_GDB=y
+BR2_TARGET_ROOTFS_EXT2_SIZE="512M"
+BR2_TOOLCHAIN_BUILDROOT_CXX=y
+# BR2_PACKAGE_BPF_EXAMPLES=y
+BR2_PACKAGE_CEREAL=y
+BR2_PACKAGE_BPFTRACE=y
+BR2_PACKAGE_BCC=y
+BR2_TARGET_ENABLE_ROOT_LOGIN=n
+BR2_TARGET_GENERIC_GETTY=n
+BR2_PACKAGE_LIBMNL=y
+BR2_PACKAGE_IPROUTE2=y
+BR2_LINUX_KERNEL_NEEDS_HOST_PAHOLE=y
+# for bpf-examples
+BR2_PACKAGE_LIBPCAP=y
+BR2_PACKAGE_BPFTOOL=y
+
+# bcc-python
+BR2_PACKAGE_PYTHON3=y
+
+# gdb/gdbserver
+BR2_PACKAGE_GDB=y
+BR2_PACKAGE_GDB_SERVER=y
+BR2_PACKAGE_GDB_DEBUGGER=y
+
+# valgrin
+BR2_PACKAGE_VALGRIND=y
+BR2_PACKAGE_VALGRIND_MEMCHECK=y
+BR2_PACKAGE_VALGRIND_CACHEGRIND=y
+BR2_PACKAGE_VALGRIND_CALLGRIND=y
+BR2_PACKAGE_VALGRIND_HELGRIND=y
+BR2_PACKAGE_VALGRIND_DRD=y
+BR2_PACKAGE_VALGRIND_MASSIF=y
+BR2_PACKAGE_VALGRIND_DHAT=y
diff --git a/configs/qemu_x86_64_defconfig b/configs/qemu_x86_64_defconfig
index 9e99d9d2b2..682997485c 100644
--- a/configs/qemu_x86_64_defconfig
+++ b/configs/qemu_x86_64_defconfig
@@ -29,3 +29,9 @@ BR2_LINUX_KERNEL_NEEDS_HOST_LIBELF=y
 # host-qemu for gitlab testing
 BR2_PACKAGE_HOST_QEMU=y
 BR2_PACKAGE_HOST_QEMU_SYSTEM_MODE=y
+
+BR2_TARGET_ENABLE_ROOT_LOGIN=n
+BR2_TARGET_GENERIC_GETTY=n
+BR2_PACKAGE_LIBMNL=y
+BR2_PACKAGE_IPROUTE2=y
+BR2_LINUX_KERNEL_NEEDS_HOST_PAHOLE=y
diff --git a/gdb.sh b/gdb.sh
new file mode 100755
index 0000000000..d84e5f306b
--- /dev/null
+++ b/gdb.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+./output/host/bin/qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append "rootwait root=/dev/vda console=ttyAMA0" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0 -s -S
diff --git a/launch.json b/launch.json
new file mode 100644
index 0000000000..c0b7caf9b6
--- /dev/null
+++ b/launch.json
@@ -0,0 +1,27 @@
+{
+    "version": "0.2.0",
+    "configurations": [
+        {
+            "type": "cppdbg",
+            "request": "launch",
+            "name": "Debug Kernel",
+            "program": "${workspaceFolder}/vmlinux",
+            "args": [],
+            "cwd": "${workspaceFolder}",
+            "externalConsole": false,
+            "stopAtEntry": false,
+            "miDebuggerServerAddress": "localhost:1234",
+            "linux": {
+                "MIMode": "gdb"
+            },
+            "miDebuggerPath": "/home/lixiang/github/sst-buildroot/output/host/bin/aarch64-linux-gdb",
+            "setupCommands": [
+                {
+                    "description": "Enable pretty-printing for gdb",
+                    "text": "-enable-pretty-printing",
+                    "ignoreFailures": true
+                }
+            ],
+        }
+    ]
+}
\ No newline at end of file
diff --git a/package/Config.in b/package/Config.in
index 4db262f48e..cde78bec1e 100644
--- a/package/Config.in
+++ b/package/Config.in
@@ -1,3 +1,9 @@
+source "package/bpf-examples/Config.in"
+source "package/bpftrace/Config.in"
+source "package/bcc/Config.in"
+source "package/hello/Config.in"
+source "package/python-bcc/Config.in"
+
 menu "Target packages"
 
 	source "package/busybox/Config.in"
diff --git a/package/bcc/Config.in b/package/bcc/Config.in
new file mode 100644
index 0000000000..2bdcd874f8
--- /dev/null
+++ b/package/bcc/Config.in
@@ -0,0 +1,33 @@
+config BR2_PACKAGE_BCC
+	bool "bcc"
+	depends on BR2_PACKAGE_LLVM_ARCH_SUPPORTS
+	# depends on BR2_PACKAGE_LUAJIT_ARCH_SUPPORTS
+	depends on BR2_TOOLCHAIN_USES_GLIBC # hardcode GNU tuple (x86_64-unknown-linux-gnu)
+	depends on BR2_LINUX_KERNEL # needs kernel sources on the target
+	depends on BR2_HOST_GCC_AT_LEAST_4_9
+	depends on BR2_TOOLCHAIN_GCC_AT_LEAST_4_8 # clang
+	depends on BR2_TOOLCHAIN_HAS_THREADS # clang
+	depends on BR2_INSTALL_LIBSTDCPP # clang
+	depends on !BR2_TOOLCHAIN_HAS_GCC_BUG_64735 # clang
+	depends on !BR2_STATIC_LIBS # clang, luajit
+	depends on BR2_USE_WCHAR # clang
+	depends on BR2_PACKAGE_CEREAL
+	select BR2_PACKAGE_CLANG
+	select BR2_PACKAGE_ELFUTILS
+	select BR2_PACKAGE_FLEX # needs FlexLexer.h
+	select BR2_PACKAGE_LLVM_BPF
+	# select BR2_PACKAGE_LUAJIT
+	# select BR2_PACKAGE_PYTHON_BCC # wrappers for BPF
+	help
+	  BPF Compiler Collection (BCC)
+
+comment "bcc needs a Linux kernel to be built"
+	depends on !BR2_LINUX_KERNEL
+
+comment "bcc needs a glibc toolchain w/ wchar, threads, C++, gcc >= 4.8, host gcc >= 4.8, dynamic library"
+	depends on BR2_PACKAGE_LLVM_ARCH_SUPPORTS
+	depends on BR2_LINUX_KERNEL
+	depends on !BR2_TOOLCHAIN_USES_GLIBC || !BR2_TOOLCHAIN_HAS_THREADS \
+		|| !BR2_INSTALL_LIBSTDCPP || !BR2_HOST_GCC_AT_LEAST_4_9 \
+		|| !BR2_TOOLCHAIN_GCC_AT_LEAST_4_8 || BR2_STATIC_LIBS \
+                || !BR2_USE_WCHAR
diff --git a/package/bcc/bcc.mk b/package/bcc/bcc.mk
new file mode 100644
index 0000000000..97a7fe7252
--- /dev/null
+++ b/package/bcc/bcc.mk
@@ -0,0 +1,24 @@
+################################################################################
+#
+# bcc
+#
+################################################################################
+
+BCC_VERSION = v0.33.0
+BCC_SITE = https://github.com/iovisor/bcc
+BCC_SITE_METHOD = git
+BCC_LICENSE = Apache-2.0
+BCC_LICENSE_FILES = LICENSE.txt
+BCC_INSTALL_STAGING = YES
+
+BCC_DEPENDENCIES = host-bison host-flex clang elfutils flex llvm libbpf cereal
+
+# ENABLE_LLVM_SHARED=ON to use llvm.so.
+# Force REVISION otherwise bcc will use git describe to generate a version number.
+BCC_CONF_OPTS = -DENABLE_LLVM_SHARED=ON \
+	-DREVISION=$(BCC_VERSION) \
+	-DENABLE_CLANG_JIT=ON \
+	-DCMAKE_USE_LIBBPF_PACKAGE=ON \
+	-DENABLE_MAN=OFF
+
+$(eval $(cmake-package))
\ No newline at end of file
diff --git a/package/bpf-examples/Config.in b/package/bpf-examples/Config.in
new file mode 100644
index 0000000000..24c74a61d8
--- /dev/null
+++ b/package/bpf-examples/Config.in
@@ -0,0 +1,6 @@
+config BR2_PACKAGE_BPF_EXAMPLES
+        bool "bpf-example"
+        select BR2_PACKAGE_LIBBPF
+        select BR2_PACKAGE_LIBCAP
+        help
+                XDP bpf-example package
diff --git a/package/bpf-examples/bpf-examples.mk b/package/bpf-examples/bpf-examples.mk
new file mode 100644
index 0000000000..7d8c376bb3
--- /dev/null
+++ b/package/bpf-examples/bpf-examples.mk
@@ -0,0 +1,23 @@
+################################################################################
+#
+# bpf-example
+#
+################################################################################
+
+BPF_EXAMPLES_VERSION = main
+BPF_EXAMPLES_SITE = https://github.com/xdp-project/bpf-examples
+BPF_EXAMPLES_SITE_METHOD = git
+BPF_EXAMPLES_GIT_SUBMODULES = YES
+BPF_EXAMPLES_LICENSE = BSD-2-Clause
+BPF_EXAMPLES_DEPENDENCIES += libcap
+
+define BPF_EXAMPLES_BUILD_CMDS
+	$(TARGET_MAKE_ENV) $(TARGET_CONFIGURE_OPTS) $(MAKE) -C $(@D)
+endef
+
+define BPF_EXAMPLES_INSTALL_TARGET_CMDS
+	$(TARGET_MAKE_ENV) $(TARGET_CONFIGURE_OPTS) $(MAKE) \
+		-C $(@D) install DESTDIR="$(TARGET_DIR)" prefix=/root
+endef
+
+$(eval $(generic-package))
diff --git a/package/bpf-examples/fix.patch b/package/bpf-examples/fix.patch
new file mode 100644
index 0000000000..a53edd6323
--- /dev/null
+++ b/package/bpf-examples/fix.patch
@@ -0,0 +1,24 @@
+diff --git a/Makefile b/Makefile
+index 88ad10c..c11d518 100644
+--- a/Makefile
++++ b/Makefile
+@@ -17,7 +17,7 @@ SUBDIRS := encap-forward
+ SUBDIRS += ktrace-CO-RE
+ SUBDIRS += lsm-nobpf
+ SUBDIRS += nat64-bpf
+-SUBDIRS += pkt-loop-filter
++# SUBDIRS += pkt-loop-filter
+ SUBDIRS += pping
+ SUBDIRS += preserve-dscp
+ SUBDIRS += tc-basic-classifier
+diff --git a/lib/defines.mk b/lib/defines.mk
+index a200e25..3391cde 100644
+--- a/lib/defines.mk
++++ b/lib/defines.mk
+@@ -1,5 +1,5 @@
+ CFLAGS ?= -O2 -g
+-BPF_CFLAGS ?= -Wno-visibility
++BPF_CFLAGS ?= -Wno-visibility -Wno-unused-command-line-argument -fno-stack-protector
+ 
+ include $(LIB_DIR)/../config.mk
+ 
diff --git a/package/bpf-examples/sub.patch b/package/bpf-examples/sub.patch
new file mode 100644
index 0000000000..1a399900a9
--- /dev/null
+++ b/package/bpf-examples/sub.patch
@@ -0,0 +1,11 @@
+diff --git a/lib/xdp-tools/lib/defines.mk b/lib/xdp-tools/lib/defines.mk
+index 54b259f..b18ebe8 100644
+--- a/lib/xdp-tools/lib/defines.mk
++++ b/lib/xdp-tools/lib/defines.mk
+@@ -1,5 +1,5 @@
+ CFLAGS ?= -O2 -g
+-BPF_CFLAGS ?= -Wno-visibility -fno-stack-protector
++BPF_CFLAGS ?= -Wno-visibility -Wno-unused-command-line-argument -fno-stack-protector
+ BPF_TARGET ?= bpf
+ 
+ HAVE_FEATURES :=
diff --git a/package/bpftool/fix.patch b/package/bpftool/fix.patch
new file mode 100644
index 0000000000..258064ae22
--- /dev/null
+++ b/package/bpftool/fix.patch
@@ -0,0 +1,13 @@
+diff --git a/src/Makefile b/src/Makefile
+index c2b9200..89664ae 100644
+--- a/src/Makefile
++++ b/src/Makefile
+@@ -204,7 +204,7 @@ $(OUTPUT)%.bpf.o: skeleton/%.bpf.c $(OUTPUT)vmlinux.h $(LIBBPF_BOOTSTRAP)
+ 	$(QUIET_CLANG)$(CLANG) \
+ 		-I$(or $(OUTPUT),.) \
+ 		-I$(srctree)/include/uapi/ \
+-		-I$(LIBBPF_BOOTSTRAP_INCLUDE) \
++		-I$(LIBBPF_BOOTSTRAP_INCLUDE) -fno-stack-protector \
+ 		-g -O2 -Wall -target bpf -c $< -o $@
+ 	$(Q)$(LLVM_STRIP) -g $@
+ 
diff --git a/package/bpftrace/Config.in b/package/bpftrace/Config.in
new file mode 100644
index 0000000000..0253fb8770
--- /dev/null
+++ b/package/bpftrace/Config.in
@@ -0,0 +1,6 @@
+config BR2_PACKAGE_BPFTRACE
+        bool "bpftrace"
+        select BR2_PACKAGE_LIBBPF
+        select BR2_PACKAGE_LIBCAP
+        help
+                bpftrace package
diff --git a/package/bpftrace/bpftrace.mk b/package/bpftrace/bpftrace.mk
new file mode 100644
index 0000000000..9e51eb4f21
--- /dev/null
+++ b/package/bpftrace/bpftrace.mk
@@ -0,0 +1,26 @@
+################################################################################
+#
+# bpftrace
+#
+################################################################################
+
+BPFTRACE_VERSION = v0.22.1
+BPFTRACE_SITE = https://github.com/bpftrace/bpftrace
+BPFTRACE_SITE_METHOD = git
+BPFTRACE_GIT_SUBMODULES = YES
+BPFTRACE_LICENSE = BSD-2-Clause
+
+ifeq ($(BR2_PACKAGE_LIBCAP),y)
+BPFTRACE_DEPENDENCIES += libbpf
+endif
+
+define BPFTRACE_BUILD_CMDS
+	$(TARGET_MAKE_ENV) $(TARGET_CONFIGURE_OPTS) $(MAKE) -C $(@D)
+endef
+
+# define BPFTRACE_INSTALL_TARGET_CMDS
+# 	$(TARGET_MAKE_ENV) $(TARGET_CONFIGURE_OPTS) $(MAKE) \
+# 		-C $(@D) install DESTDIR="$(TARGET_DIR)" prefix=/root
+# endef
+
+$(eval $(cmake-package))
\ No newline at end of file
diff --git a/package/busybox/inittab b/package/busybox/inittab
index f2b4df801b..c28fb35193 100644
--- a/package/busybox/inittab
+++ b/package/busybox/inittab
@@ -30,6 +30,7 @@ null::sysinit:/bin/ln -sf /proc/self/fd/2 /dev/stderr
 
 # Put a getty on the serial port
 #ttyS0::respawn:/sbin/getty -L ttyS0 115200 vt100 # GENERIC_SERIAL
+console::respawn:/bin/sh
 
 # Stuff to do for the 3-finger salute
 #::ctrlaltdel:/sbin/reboot
diff --git a/package/hello/Config.in b/package/hello/Config.in
new file mode 100644
index 0000000000..5c486ac9c3
--- /dev/null
+++ b/package/hello/Config.in
@@ -0,0 +1,5 @@
+config BR2_PACKAGE_HELLO_MODULE
+        bool "hello_module"
+        depends on BR2_LINUX_KERNEL
+        help
+                Linux Kernel Module Cheat.
\ No newline at end of file
diff --git a/package/hello/Makefile b/package/hello/Makefile
new file mode 100644
index 0000000000..0d71e958e1
--- /dev/null
+++ b/package/hello/Makefile
@@ -0,0 +1,10 @@
+obj-m = hello.o
+ccflags-y := -DDEBUG -g -std=gnu99 -Wno-declaration-after-statement
+
+.PHONY: all clean
+
+all:
+	$(MAKE) -C $(LINUX_DIR) M=$(PWD) modules
+
+clean:
+	$(MAKE) -C $(LINUX_DIR) M=$(PWD) clean
diff --git a/package/hello/Makefile_nbr b/package/hello/Makefile_nbr
new file mode 100644
index 0000000000..6b0126fdae
--- /dev/null
+++ b/package/hello/Makefile_nbr
@@ -0,0 +1,9 @@
+CROSS=/home/lixiang/github/buildroot-2024.02.10/output/host/bin/i686-buildroot-linux-gnu-
+KERNEL_DIR=/home/lixiang/github/buildroot-2024.02.10/output/build/linux-6.1.44
+
+all:
+	make -C $(KERNEL_DIR) M=$(PWD) ARCH=x86 CROSS_COMPILE=$(CROSS) EXTRA_CFLAGS=-g modules
+clean:
+	make -C $(KERNEL_DIR) M=$(PWD) ARCH=x86 CROSS_COMPILE=$(CROSS) clean
+
+obj-m = hello.o
\ No newline at end of file
diff --git a/package/hello/bpf.c b/package/hello/bpf.c
new file mode 100644
index 0000000000..101581187a
--- /dev/null
+++ b/package/hello/bpf.c
@@ -0,0 +1,25 @@
+/*
+clear; /usr/bin/clang \
+    -target bpf \
+    -g \
+    -O2 \
+    -c bpf.c \
+    -o bpf.o
+
+cp bpf.o ../output/target/root/bpf.o
+ */
+
+#include <linux/bpf.h>
+#include <bpf/bpf_helpers.h>
+#include <bpf/bpf_endian.h>
+
+int counter = 0;
+
+SEC("xdp")
+int hello(void *ctx) {
+    bpf_printk("Hello World %d", counter);
+    counter++;
+    return XDP_PASS;
+}
+
+char LICENSE[] SEC("license") = "Dual BSD/GPL";
\ No newline at end of file
diff --git a/package/hello/bpf_app.c b/package/hello/bpf_app.c
new file mode 100644
index 0000000000..6086f79c63
--- /dev/null
+++ b/package/hello/bpf_app.c
@@ -0,0 +1,26 @@
+#include <stdio.h>
+#include <uapi/linux/bpf.h>
+#include <bpf_load.h>
+
+/*
+clang \
+    -o loader \
+    -l elf \
+    -l bpf \
+    -I/home/lixiang/github/buildroot-2024.02.10/output/build/libbpf-1.1.0/include/ \
+    -I/home/lixiang/github/buildroot-2024.02.10/output/build/linux-6.1.44/include/ \
+    bpf_loader.c
+*/
+
+int main(int argc, const char **argv) {
+    if (load_bpf_file("bpf.o")) {
+        printf("bpf program loaded successfully\n");
+    } else {
+        printf("bpf program failed to load\n");
+        return -1;
+    }
+
+    read_trace_pipe();
+
+    return 0;
+}
\ No newline at end of file
diff --git a/package/hello/bpf_loader.c b/package/hello/bpf_loader.c
new file mode 100644
index 0000000000..62b21a35c5
--- /dev/null
+++ b/package/hello/bpf_loader.c
@@ -0,0 +1,20 @@
+#include <stdio.h>
+#include <uapi/linux/bpf.h>
+#include <bpf_load.h>
+
+/*
+clang -o loader -l elf -I/home/lixiang/github/buildroot-2024.02.10/output/build/linux-6.1.44/include/ bpf_loader.c
+*/
+
+int main(int argc, const char **argv) {
+    if (load_bpf_file("bpf.o")) {
+        printf("bpf program loaded successfully\n");
+    } else {
+        printf("bpf program failed to load\n");
+        return -1;
+    }
+
+    read_trace_pipe();
+
+    return 0;
+}
\ No newline at end of file
diff --git a/package/hello/external.desc b/package/hello/external.desc
new file mode 100644
index 0000000000..4811c4a8e6
--- /dev/null
+++ b/package/hello/external.desc
@@ -0,0 +1 @@
+name: HELLO_MODULE
\ No newline at end of file
diff --git a/package/hello/external.mk b/package/hello/external.mk
new file mode 100644
index 0000000000..8723e45061
--- /dev/null
+++ b/package/hello/external.mk
@@ -0,0 +1,5 @@
+KERNEL_MODULE_VERSION = 1.0
+KERNEL_MODULE_SITE = $(BR2_EXTERNAL_KERNEL_MODULE_PATH)
+KERNEL_MODULE_SITE_METHOD = local
+$(eval $(kernel-module))
+$(eval $(generic-package))
\ No newline at end of file
diff --git a/package/hello/hello.c b/package/hello/hello.c
new file mode 100644
index 0000000000..70e2463004
--- /dev/null
+++ b/package/hello/hello.c
@@ -0,0 +1,23 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+
+static int number = 10;
+
+static int __init hello_init(void) {
+    printk(KERN_WARNING "Hello, world! qemu kernel\n");
+    number--;
+    return 0;
+}
+
+static void __exit hello_exit(void) {
+    printk(KERN_WARNING "Goodbye! qemu kernel\n");
+}
+
+module_init(hello_init);
+module_exit(hello_exit);
+
+MODULE_LICENSE("GPL");
+MODULE_AUTHOR("JeffChong");
+MODULE_DESCRIPTION("A simple Hello World driver");
+MODULE_VERSION("1.0");
\ No newline at end of file
diff --git a/package/libbpf/libbpf.hash b/package/libbpf/libbpf.hash
index 75f2b1695c..f6bce1b7a6 100644
--- a/package/libbpf/libbpf.hash
+++ b/package/libbpf/libbpf.hash
@@ -3,3 +3,5 @@ sha256  5da826c968fdb8a2f714701cfef7a4b7078be030cf58b56143b245816301cbb8  libbpf
 sha256  847f4addbd56e2d5be20c4ea0845e972672fc07b755fadaae5f7abd35d71e349  LICENSE
 sha256  e1638b9a0c68ca90fad3df1d6b4e430804d2fbdc15e58d02cffddfae38953bbf  LICENSE.BSD-2-Clause
 sha256  0b9a4febcdee6de55872501d5c1a8f5d8b0d1650cd4d5351995ceb22e889f8ca  LICENSE.LGPL-2.1
+sha256  11db86acd627e468bc48b7258c1130aba41a12c4d364f78e184fd2f5a913d861  libbpf-1.3.0.tar.gz
+sha256  53492aff6dd47e4da04ef5e672d753b9743848bdb38e9d90eafbe190b7983c44  libbpf-1.5.0.tar.gz
diff --git a/package/libbpf/libbpf.mk b/package/libbpf/libbpf.mk
index ef33542f2d..7fa541ad24 100644
--- a/package/libbpf/libbpf.mk
+++ b/package/libbpf/libbpf.mk
@@ -4,7 +4,7 @@
 #
 ################################################################################
 
-LIBBPF_VERSION = 1.1.0
+LIBBPF_VERSION = 1.5.0
 LIBBPF_SITE = $(call github,libbpf,libbpf,v$(LIBBPF_VERSION))
 LIBBPF_LICENSE = GPL-2.0, LGPL-2.1, BSD-2-Clause
 LIBBPF_LICENSE_FILES = LICENSE LICENSE.BSD-2-Clause LICENSE.LGPL-2.1
diff --git a/package/python-bcc/Config.in b/package/python-bcc/Config.in
new file mode 100644
index 0000000000..a70c0d1df2
--- /dev/null
+++ b/package/python-bcc/Config.in
@@ -0,0 +1,5 @@
+config BR2_PACKAGE_PYTHON_BCC
+	bool "python-bcc"
+	depends on BR2_PACKAGE_PYTHON3
+	help
+	  Python Wrapper BPF Compiler Collection (BCC)
\ No newline at end of file
diff --git a/package/python-bcc/python-bcc.mk b/package/python-bcc/python-bcc.mk
new file mode 100644
index 0000000000..9ec8eb5f63
--- /dev/null
+++ b/package/python-bcc/python-bcc.mk
@@ -0,0 +1,18 @@
+################################################################################
+#
+# python bcc
+#
+################################################################################
+
+PYTHON_BCC_VERSION = v0.33.0
+PYTHON_BCC_SITE = https://github.com/iovisor/bcc
+PYTHON_BCC_SITE_METHOD = git
+PYTHON_BCC_LICENSE = Apache-2.0
+PYTHON_BCC_LICENSE_FILES = LICENSE.txt
+PYTHON_BCC_INSTALL_STAGING = YES
+PYTHON_BCC_SUBDIR=src/python/bcc/
+PYTHON_BCC_SETUP_TYPE = setuptools
+
+PYTHON_BCC_DEPENDENCIES = python3
+
+$(eval $(python-package))
\ No newline at end of file
diff --git a/run.sh b/run.sh
new file mode 100755
index 0000000000..53a0aad26c
--- /dev/null
+++ b/run.sh
@@ -0,0 +1,3 @@
+#!/bin/bash
+
+./output/host/bin/qemu-system-aarch64 -M virt -cpu cortex-a53 -nographic -smp 1 -kernel output/images/Image -append "rootwait root=/dev/vda console=ttyAMA0" -netdev user,id=eth0 -device virtio-net-device,netdev=eth0 -drive file=output/images/rootfs.ext4,if=none,format=raw,id=hd0 -device virtio-blk-device,drive=hd0
